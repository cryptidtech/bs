// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod comrade {
    pub mod api {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod utils {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// Logs some output from the guest component.
            pub fn log(message: &str) -> () {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "comrade:api/utils")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get a random byte from the host system
            pub fn random_byte() -> u8 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "comrade:api/utils")]
                    unsafe extern "C" {
                        #[link_name = "random-byte"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u8
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod pairs {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Either current or proposed
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Either {
                /// The current kv pairs
                Current,
                /// The proposed kv pairs
                Proposed,
            }
            impl ::core::fmt::Debug for Either {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Either::Current => f.debug_tuple("Either::Current").finish(),
                        Either::Proposed => f.debug_tuple("Either::Proposed").finish(),
                    }
                }
            }
            impl Either {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Either {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Either::Current,
                        1 => Either::Proposed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// A binary value and associated hint
            #[derive(Clone)]
            pub struct Binary {
                /// The binary value
                pub data: _rt::Vec<u8>,
                /// A hint for the binary value
                pub hint: _rt::String,
            }
            impl ::core::fmt::Debug for Binary {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Binary")
                        .field("data", &self.data)
                        .field("hint", &self.hint)
                        .finish()
                }
            }
            /// A string value and associated hint
            #[derive(Clone)]
            pub struct Str {
                /// The string value
                pub data: _rt::String,
                /// A hint for the string value
                pub hint: _rt::String,
            }
            impl ::core::fmt::Debug for Str {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Str")
                        .field("data", &self.data)
                        .field("hint", &self.hint)
                        .finish()
                }
            }
            /// A variant representing the different types of values that can be stored.
            #[derive(Clone)]
            pub enum Value {
                /// A binary value
                Bin(Binary),
                /// A string value
                Str(Str),
                /// Success value
                Success(u32),
                /// Failure value
                Failure(_rt::String),
            }
            impl ::core::fmt::Debug for Value {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Value::Bin(e) => f.debug_tuple("Value::Bin").field(e).finish(),
                        Value::Str(e) => f.debug_tuple("Value::Str").field(e).finish(),
                        Value::Success(e) => {
                            f.debug_tuple("Value::Success").field(e).finish()
                        }
                        Value::Failure(e) => {
                            f.debug_tuple("Value::Failure").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the value of the resource.
            pub fn put(choice: Either, key: &str, value: &Value) -> Value {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 5 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 5
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result8_0, result8_1, result8_2, result8_3, result8_4) = match value {
                        Value::Bin(e) => {
                            let Binary { data: data1, hint: hint1 } = e;
                            let vec2 = data1;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            let vec3 = hint1;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (0i32, ptr2.cast_mut(), len2, ptr3.cast_mut(), len3)
                        }
                        Value::Str(e) => {
                            let Str { data: data4, hint: hint4 } = e;
                            let vec5 = data4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            let vec6 = hint4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (1i32, ptr5.cast_mut(), len5, ptr6.cast_mut(), len6)
                        }
                        Value::Success(e) => {
                            (
                                2i32,
                                _rt::as_i32(e) as *mut u8,
                                0usize,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        Value::Failure(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (
                                3i32,
                                ptr7.cast_mut(),
                                len7,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "comrade:api/pairs")]
                    unsafe extern "C" {
                        #[link_name = "put"]
                        fn wit_import10(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import10(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import10(
                            choice.clone() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result8_0,
                            result8_1,
                            result8_2,
                            result8_3,
                            result8_4,
                            ptr9,
                        )
                    };
                    let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                    let v28 = match l11 {
                        0 => {
                            let e28 = {
                                let l12 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let l15 = *ptr9
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr9
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len17 = l16;
                                let bytes17 = _rt::Vec::from_raw_parts(
                                    l15.cast(),
                                    len17,
                                    len17,
                                );
                                Binary {
                                    data: _rt::Vec::from_raw_parts(l12.cast(), len14, len14),
                                    hint: _rt::string_lift(bytes17),
                                }
                            };
                            Value::Bin(e28)
                        }
                        1 => {
                            let e28 = {
                                let l18 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len20 = l19;
                                let bytes20 = _rt::Vec::from_raw_parts(
                                    l18.cast(),
                                    len20,
                                    len20,
                                );
                                let l21 = *ptr9
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr9
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                Str {
                                    data: _rt::string_lift(bytes20),
                                    hint: _rt::string_lift(bytes23),
                                }
                            };
                            Value::Str(e28)
                        }
                        2 => {
                            let e28 = {
                                let l24 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                l24 as u32
                            };
                            Value::Success(e28)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e28 = {
                                let l25 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l26 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len27 = l26;
                                let bytes27 = _rt::Vec::from_raw_parts(
                                    l25.cast(),
                                    len27,
                                    len27,
                                );
                                _rt::string_lift(bytes27)
                            };
                            Value::Failure(e28)
                        }
                    };
                    let result29 = v28;
                    result29
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the value of the resource.
            /// Get a value from the given key, if it exists.
            /// Returns some value or None.
            pub fn get(choice: Either, key: &str) -> Option<Value> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 6
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "comrade:api/pairs")]
                    unsafe extern "C" {
                        #[link_name = "get"]
                        fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(choice.clone() as i32, ptr0.cast_mut(), len0, ptr1)
                    };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result22 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = i32::from(
                                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let v21 = match l4 {
                                    0 => {
                                        let e21 = {
                                            let l5 = *ptr1
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *ptr1
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            let l8 = *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            Binary {
                                                data: _rt::Vec::from_raw_parts(l5.cast(), len7, len7),
                                                hint: _rt::string_lift(bytes10),
                                            }
                                        };
                                        Value::Bin(e21)
                                    }
                                    1 => {
                                        let e21 = {
                                            let l11 = *ptr1
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *ptr1
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            let l14 = *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                l14.cast(),
                                                len16,
                                                len16,
                                            );
                                            Str {
                                                data: _rt::string_lift(bytes13),
                                                hint: _rt::string_lift(bytes16),
                                            }
                                        };
                                        Value::Str(e21)
                                    }
                                    2 => {
                                        let e21 = {
                                            let l17 = *ptr1
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l17 as u32
                                        };
                                        Value::Success(e21)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e21 = {
                                            let l18 = *ptr1
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *ptr1
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                l18.cast(),
                                                len20,
                                                len20,
                                            );
                                            _rt::string_lift(bytes20)
                                        };
                                        Value::Failure(e21)
                                    }
                                };
                                v21
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result22
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod comrade {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Value = super::super::super::super::comrade::api::pairs::Value;
                /// The main API resource
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Api {
                    handle: _rt::Resource<Api>,
                }
                type _ApiRep<T> = Option<T>;
                impl Api {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Api`.
                    pub fn new<T: GuestApi>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ApiRep<T> = Some(val);
                        let ptr: *mut _ApiRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestApi>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestApi>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe { _rt::Box::from_raw(handle as *mut _ApiRep<T>) };
                    }
                    fn as_ptr<T: GuestApi>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Api`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ApiBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Api>,
                }
                impl<'a> ApiBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Api {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]comrade:api/api")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]api"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_api_cabi<T: GuestApi>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Api::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_try_unlock_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::try_unlock(
                        unsafe { ApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_try_unlock<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_try_lock_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::try_lock(
                        unsafe { ApiBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    use super::super::super::super::comrade::api::pairs::Value as V10;
                                    match e {
                                        V10::Bin(e) => {
                                            *ptr2
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::comrade::api::pairs::Binary {
                                                data: data3,
                                                hint: hint3,
                                            } = e;
                                            let vec4 = (data3).into_boxed_slice();
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            ::core::mem::forget(vec4);
                                            *ptr2
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len4;
                                            *ptr2
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr4.cast_mut();
                                            let vec5 = (hint3.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *ptr2
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len5;
                                            *ptr2
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V10::Str(e) => {
                                            *ptr2
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::comrade::api::pairs::Str {
                                                data: data6,
                                                hint: hint6,
                                            } = e;
                                            let vec7 = (data6.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *ptr2
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *ptr2
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                            let vec8 = (hint6.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *ptr2
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *ptr2
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        V10::Success(e) => {
                                            *ptr2
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            *ptr2
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        V10::Failure(e) => {
                                            *ptr2
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            ::core::mem::forget(vec9);
                                            *ptr2
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *ptr2
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr9.cast_mut();
                                        }
                                    }
                                }
                                None => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec11 = (e.into_bytes()).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_try_lock<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = i32::from(
                                        *arg0
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l2 {
                                        0 => {
                                            let l3 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l4 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base5 = l3;
                                            let len5 = l4;
                                            _rt::cabi_dealloc(base5, len5 * 1, 1);
                                            let l6 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                        1 => {
                                            let l8 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                            let l10 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                        2 => {}
                                        _ => {
                                            let l12 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l12, l13, 1);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {
                            let l14 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l15 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l14, l15, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Api: GuestApi;
                }
                pub trait GuestApi: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]comrade:api/api")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]api"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]comrade:api/api")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]api"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// The main API function
                    fn new() -> Self;
                    /// Set the unlock script Fails if the script is not valid.
                    fn try_unlock(&self, script: _rt::String) -> Result<(), _rt::String>;
                    /// Tries a lock script
                    fn try_lock(
                        &self,
                        lock: _rt::String,
                    ) -> Result<Option<Value>, _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_comrade_api_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "comrade:api/api#[constructor]api")] unsafe extern "C" fn
                        export_constructor_api() -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_api_cabi::<<$ty as $($path_to_types)*:: Guest
                        >::Api > () } } #[unsafe (export_name =
                        "comrade:api/api#[method]api.try-unlock")] unsafe extern "C" fn
                        export_method_api_try_unlock(arg0 : * mut u8, arg1 : * mut u8,
                        arg2 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_api_try_unlock_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Api > (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "cabi_post_comrade:api/api#[method]api.try-unlock")] unsafe
                        extern "C" fn _post_return_method_api_try_unlock(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_api_try_unlock::<<$ty as
                        $($path_to_types)*:: Guest >::Api > (arg0) } } #[unsafe
                        (export_name = "comrade:api/api#[method]api.try-lock")] unsafe
                        extern "C" fn export_method_api_try_lock(arg0 : * mut u8, arg1 :
                        * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_api_try_lock_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Api > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_comrade:api/api#[method]api.try-lock")] unsafe extern
                        "C" fn _post_return_method_api_try_lock(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_api_try_lock::<<$ty as $($path_to_types)*::
                        Guest >::Api > (arg0) } } const _ : () = { #[doc(hidden)]
                        #[unsafe (export_name = "comrade:api/api#[dtor]api")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Api::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Api > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_comrade_api_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 7 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 7
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_wacc_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::comrade::api::api::__export_comrade_api_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::comrade::api::api);
    };
}
#[doc(inline)]
pub(crate) use __export_wacc_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:comrade:api:wacc:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 632] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfd\x03\x01A\x02\x01\
A\x07\x01B\x04\x01@\x01\x07messages\x01\0\x04\0\x03log\x01\0\x01@\0\0}\x04\0\x0b\
random-byte\x01\x01\x03\0\x11comrade:api/utils\x05\0\x01B\x0e\x01m\x02\x07curren\
t\x08proposed\x04\0\x06either\x03\0\0\x01p}\x01r\x02\x04data\x02\x04hints\x04\0\x06\
binary\x03\0\x03\x01r\x02\x04datas\x04hints\x04\0\x03str\x03\0\x05\x01q\x04\x03b\
in\x01\x04\0\x03str\x01\x06\0\x07success\x01y\0\x07failure\x01s\0\x04\0\x05value\
\x03\0\x07\x01@\x03\x06choice\x01\x03keys\x05value\x08\0\x08\x04\0\x03put\x01\x09\
\x01k\x08\x01@\x02\x06choice\x01\x03keys\0\x0a\x04\0\x03get\x01\x0b\x03\0\x11com\
rade:api/pairs\x05\x01\x02\x03\0\x01\x05value\x01B\x0e\x02\x03\x02\x01\x02\x04\0\
\x05value\x03\0\0\x04\0\x03api\x03\x01\x01i\x02\x01@\0\0\x03\x04\0\x10[construct\
or]api\x01\x04\x01h\x02\x01j\0\x01s\x01@\x02\x04self\x05\x06scripts\0\x06\x04\0\x16\
[method]api.try-unlock\x01\x07\x01k\x01\x01j\x01\x08\x01s\x01@\x02\x04self\x05\x04\
locks\0\x09\x04\0\x14[method]api.try-lock\x01\x0a\x04\0\x0fcomrade:api/api\x05\x03\
\x04\0\x10comrade:api/wacc\x04\0\x0b\x0a\x01\0\x04wacc\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
